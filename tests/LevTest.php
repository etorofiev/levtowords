<?php

namespace Northbridg3\Levtowords\Tests;

use Northbridg3\Levtowords\Lev;
use PHPUnit\Framework\TestCase;

class LevTest extends TestCase
{
    public function testLevs()
    {
        $values = [
            1 => 'един лев',
            2 => 'два лева',
            3 => 'три лева',
            4 => 'четири лева',
            5 => 'пет лева',
            6 => 'шест лева',
            7 => 'седем лева',
            8 => 'осем лева',
            9 => 'девет лева',
            10 => 'десет лева',
            11 => 'единадесет лева',
            12 => 'дванадесет лева',
            13 => 'тринадесет лева',
            14 => 'четиринадесет лева',
            15 => 'петнадесет лева',
            16 => 'шестнадесет лева',
            17 => 'седемнадесет лева',
            18 => 'осемнадесет лева',
            19 => 'деветнадесет лева',
            20 => 'двадесет лева',
            30 => 'тридесет лева',
            40 => 'четиридесет лева',
            50 => 'петдесет лева',
            60 => 'шестдесет лева',
            70 => 'седемдесет лева',
            80 => 'осемдесет лева',
            90 => 'деветдесет лева',
            99 => 'деветдесет и девет лева',
            100 => 'сто лева',
            101 => 'сто и един лева',
            102 => 'сто и два лева',
            111 => 'сто и единадесет лева',
            199 => 'сто деветдесет и девет лева',
            200 => 'двеста лева',
            300 => 'триста лева',
            400 => 'четиристотин лева',
            500 => 'петстотин лева',
            600 => 'шестстотин лева',
            700 => 'седемстотин лева',
            800 => 'осемстотин лева',
            900 => 'деветстотин лева',
            999 => 'деветстотин деветдесет и девет лева',
        ];

        foreach ($values as $money => $words) {
            $lev = new Lev($money);
            $this->assertSame($words, $lev->toWords());
        }
    }

    public function testThousands()
    {
        $values = [
            1000 => 'хиляда лева',
            1001 => 'хиляда и един лева',
            1002 => 'хиляда и два лева',
            1011 => 'хиляда и единадесет лева',
            1099 => 'хиляда деветдесет и девет лева',
            1100 => 'хиляда и сто лева',
            1101 => 'хиляда сто и един лева',
            1102 => 'хиляда сто и два лева',
            1111 => 'хиляда сто и единадесет лева',
            1199 => 'хиляда сто деветдесет и девет лева',
            2000 => 'две хиляди лева',
            2001 => 'две хиляди и един лева',
            2002 => 'две хиляди и два лева',
            2011 => 'две хиляди и единадесет лева',
            2099 => 'две хиляди деветдесет и девет лева',
            2100 => 'две хиляди и сто лева',
            2101 => 'две хиляди сто и един лева',
            2102 => 'две хиляди сто и два лева',
            2111 => 'две хиляди сто и единадесет лева',
            2199 => 'две хиляди сто деветдесет и девет лева',
            10000 => 'десет хиляди лева',
            10001 => 'десет хиляди и един лева',
            10002 => 'десет хиляди и два лева',
            10099 => 'десет хиляди деветдесет и девет лева',
            10100 => 'десет хиляди и сто лева',
            10101 => 'десет хиляди сто и един лева',
            10199 => 'десет хиляди сто деветдесет и девет лева',
            100000 => 'сто хиляди лева',
            100001 => 'сто хиляди и един лева',
            101000 => 'сто и една хиляди лева',
            101001 => 'сто и една хиляди и един лева',
            102000 => 'сто и две хиляди лева',
            999999 => 'деветстотин деветдесет и девет хиляди деветстотин деветдесет и девет лева'
        ];

        foreach ($values as $money => $words) {
            $lev = new Lev($money);
            $this->assertSame($words, $lev->toWords());
        }
    }

    public function testMillions()
    {
        $values = [
            1000000 => 'един милион лева',
            1000001 => 'един милион и един лева',
            1000002 => 'един милион и два лева',
            1000011 => 'един милион и единадесет лева',
            1000100 => 'един милион и сто лева',
            1001000 => 'един милион и хиляда лева',
            1001001 => 'един милион хиляда и един лева',
            1002000 => 'един милион и две хиляди лева',
            1100000 => 'един милион и сто хиляди лева',
            1100001 => 'един милион сто хиляди и един лева',
            1200000 => 'един милион и двеста хиляди лева',
            1999999 => 'един милион деветстотин деветдесет и девет хиляди деветстотин деветдесет и девет лева',
            2000000 => 'два милиона лева',
            2000001 => 'два милиона и един лева',
            2000002 => 'два милиона и два лева',
            2000011 => 'два милиона и единадесет лева',
            2000100 => 'два милиона и сто лева',
            2001000 => 'два милиона и хиляда лева',
            2001001 => 'два милиона хиляда и един лева',
            2002000 => 'два милиона и две хиляди лева',
            2100000 => 'два милиона и сто хиляди лева',
            2100001 => 'два милиона сто хиляди и един лева',
            2200000 => 'два милиона и двеста хиляди лева',
            20000000 => 'двадесет милиона лева',
            20000001 => 'двадесет милиона и един лева',
            20001001 => 'двадесет милиона хиляда и един лева',
            100000000 => 'сто милиона лева',
            100000001 => 'сто милиона и един лева',
            100001000 => 'сто милиона и хиляда лева',
            100001001 => 'сто милиона хиляда и един лева',
            100100000 => 'сто милиона и сто хиляди лева',
            999999999 => 'деветстотин деветдесет и девет милиона деветстотин деветдесет и девет хиляди деветстотин деветдесет и девет лева',
        ];

        foreach ($values as $money => $words) {
            $lev = new Lev($money);
            $this->assertSame($words, $lev->toWords());
        }
    }

    public function testCoins()
    {
        $values = [
            '0.01' => 'една стотинка',
            '0.02' => 'две стотинки',
            '0.03' => 'три стотинки',
            '0.04' => 'четири стотинки',
            '0.05' => 'пет стотинки',
            '0.06' => 'шест стотинки',
            '0.07' => 'седем стотинки',
            '0.08' => 'осем стотинки',
            '0.09' => 'девет стотинки',
            '0.10' => 'десет стотинки',
            '0.11' => 'единадесет стотинки',
            '0.12' => 'дванадесет стотинки',
            '0.13' => 'тринадесет стотинки',
            '0.14' => 'четиринадесет стотинки',
            '0.15' => 'петнадесет стотинки',
            '0.16' => 'шестнадесет стотинки',
            '0.17' => 'седемнадесет стотинки',
            '0.18' => 'осемнадесет стотинки',
            '0.19' => 'деветнадесет стотинки',
            '0.20' => 'двадесет стотинки',
            '0.30' => 'тридесет стотинки',
            '0.40' => 'четиридесет стотинки',
            '0.50' => 'петдесет стотинки',
            '0.60' => 'шестдесет стотинки',
            '0.70' => 'седемдесет стотинки',
            '0.80' => 'осемдесет стотинки',
            '0.90' => 'деветдесет стотинки',
            '0.99' => 'деветдесет и девет стотинки'
        ];

        foreach ($values as $money => $words) {
            $lev = new Lev((float) $money);
            $this->assertSame($words, $lev->toWords());
        }
    }

    public function testCompound()
    {
        $values = [
            '1.00' => 'един лев',
            '1.01' => 'един лев и една стотинка',
            '1.02' => 'един лев и две стотинки',
            '2.14' => 'два лева и четиринадесет стотинки',
            '10.20' => 'десет лева и двадесет стотинки',
            '60.60' => 'шестдесет лева и шестдесет стотинки',
            '99.99' => 'деветдесет и девет лева и деветдесет и девет стотинки',
            '1000.01' => 'хиляда лева и една стотинка',
            '1000.02' => 'хиляда лева и две стотинки',
            '2898.89' => 'две хиляди осемстотин деветдесет и осем лева и осемдесет и девет стотинки',
        ];

        foreach ($values as $money => $words) {
            $lev = new Lev((float) $money);
            $this->assertSame($words, $lev->toWords());
        }
    }

    public function testTooLargeNumberException()
    {
        $this->expectException(\LengthException::class);
        $lev = new Lev(1000000000);
    }
}